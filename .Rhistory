as.data.frame() %>%
mutate(date = row.names(.) |>
zoo::as.yearmon() |>
yearmonth()) |>
as_tsibble() |>
model(
ARIMA(human_incidence,
ic = "aic",
stepwise = T
)
) |>
report()
original_data <- df_xts |>
as.data.frame() %>%
mutate(date = row.names(.) |> ymd())
fitted <- augment(model_sarima) |>
as.data.frame() %>%
select(date, fitted =.fitted, residuals = .resid) |>
mutate(date = ym(date)
)
CI <-  hilo(forecast::forecast(model_sarima, h = nrow(test))) |>
as.data.frame()
CI80 <- CI$`80%` |>
lapply(FUN = first) |> unlist() |>
matrix(ncol = 3, byrow = T) |>
as.data.frame() |>
select(-V3) |>
setNames(c("Lo80", "Hi80"))
CI95 <- CI$`95%` |>
lapply(FUN = first) |> unlist() |>
matrix(ncol = 3, byrow = T) |>
as.data.frame() |>
select(-V3) |>
setNames(c("Lo95", "Hi95"))
forecast_data_human_sarima <-
data.frame(
date = row.names(as.data.frame(test)) |>
ymd(),
PointForecast = CI$.mean,
CI80,
CI95
)
# Accuracy
test_acc <- test |>
as.data.frame() %>%
mutate(date = rownames(.) |> ymd() |> yearmonth()) |>
as_tsibble() |>
select(-animal_incidence)
model_sarima_accuracy <- accuracy(forecast::forecast(model_sarima, h = nrow(test)), test_acc,
measures = list(
point_accuracy_measures,
interval_accuracy_measures,
distribution_accuracy_measures
)
)
model_sarima_accuracy
set.seed(123)
model_sarima_covariates <- train |>
as.data.frame() %>%
mutate(date = row.names(.) |>
zoo::as.yearmon() |>
yearmonth()) |>
as_tsibble() |>
model(ARIMA(
human_incidence ~ animal_incidence,
ic = "aic",
stepwise = T
)) |>
report()
fitted_covariate <- augment(model_sarima_covariates) |>
as.data.frame() %>%
select(date, fitted =.fitted, residuals = .resid) |>
mutate(date = ym(date)
)
test_tsibble <- test |>
as.data.frame() %>%
mutate(date = rownames(.) |> ymd() |> yearmonth()) |>
as_tsibble() |>
select(-human_incidence)
CI_covariate <- model_sarima_covariates |>
forecast(new_data = test_tsibble) |>
hilo()
CI_covariate80 <- CI_covariate$`80%` |>
lapply(FUN = first) |>
unlist() |>
matrix(ncol = 3, byrow = T) |>
as.data.frame() |>
select(-V3) |>
setNames(c("Lo80", "Hi80"))
CI_covariate95 <- CI_covariate$`95%` |>
lapply(FUN = first) |> unlist() |>
matrix(ncol = 3, byrow = T) |>
as.data.frame() |>
select(-V3) |>
setNames(c("Lo95", "Hi95"))
forecast_data_covariate_sarima <-
data.frame(
date = row.names(as.data.frame(test)) |>
ymd(),
PointForecast = CI_covariate$.mean,
CI_covariate80,
CI_covariate95
)
model_sarima_covariates_coefficients <-
tidy(model_sarima_covariates) |>
select(-.model) %>%
as_tibble() %>%
group_by(term)
# Accuracy
test_acc2 <- test |>
as.data.frame() %>%
mutate(date = rownames(.) |> ymd() |> yearmonth()) |>
as_tsibble() |>
select(-animal_incidence)
model_sarima_covariate_accuracy <-
accuracy(
model_sarima_covariates |>
forecast(new_data = test_tsibble) ,
test_acc,
measures = list(
point_accuracy_measures,
interval_accuracy_measures,
distribution_accuracy_measures
)
)
model_sarima_covariate_accuracy
model_sarima_accuracy2 <- model_sarima_accuracy |>
mutate(model = "Model without Covariate") |>
select(-.model, -.type) |>
select(model, RMSE, MAE, MAPE)
model_sarima_covariate_accuracy2 <- model_sarima_covariate_accuracy |>
mutate(model = "Model with Covariate") |>
select(-.model, -.type) |>
select(model, RMSE, MAE, MAPE)
metrics_df <- rbind(model_sarima_accuracy2, model_sarima_covariate_accuracy2)
write.csv(metrics_df, "metrics_df.csv", row.names = F)
kableExtra::kable(metrics_df)
write.csv(metrics_df, "metrics_df_70_30.csv", row.names = F)
# 0% is upto 2021-03-01 and then the rest for testing
nrow_70 <- floor(.8 * nrow(df_xts))
train <- df_xts[1:nrow_70,]
test <- df_xts[(nrow_70 + 1):nrow(df_xts),]
nrow_70
# ACF and PACF plots ---------------------------------------------------------------------
acf(train$human_incidence)
#> shows both trend and seasonality.
#> The slow decrease in the ACF as the lags increase is due to the trend, while the “scalloped” shape
#> is due to the seasonality. Time series that show no autocorrelation are called white noise.
pacf(train$human_incidence)
set.seed(123)
model_sarima <- train |>
as.data.frame() %>%
mutate(date = row.names(.) |>
zoo::as.yearmon() |>
yearmonth()) |>
as_tsibble() |>
model(
ARIMA(human_incidence,
ic = "aic",
stepwise = T
)
) |>
report()
original_data <- df_xts |>
as.data.frame() %>%
mutate(date = row.names(.) |> ymd())
fitted <- augment(model_sarima) |>
as.data.frame() %>%
select(date, fitted =.fitted, residuals = .resid) |>
mutate(date = ym(date)
)
CI <-  hilo(forecast::forecast(model_sarima, h = nrow(test))) |>
as.data.frame()
CI80 <- CI$`80%` |>
lapply(FUN = first) |> unlist() |>
matrix(ncol = 3, byrow = T) |>
as.data.frame() |>
select(-V3) |>
setNames(c("Lo80", "Hi80"))
CI95 <- CI$`95%` |>
lapply(FUN = first) |> unlist() |>
matrix(ncol = 3, byrow = T) |>
as.data.frame() |>
select(-V3) |>
setNames(c("Lo95", "Hi95"))
forecast_data_human_sarima <-
data.frame(
date = row.names(as.data.frame(test)) |>
ymd(),
PointForecast = CI$.mean,
CI80,
CI95
)
# Accuracy
test_acc <- test |>
as.data.frame() %>%
mutate(date = rownames(.) |> ymd() |> yearmonth()) |>
as_tsibble() |>
select(-animal_incidence)
model_sarima_accuracy <- accuracy(forecast::forecast(model_sarima, h = nrow(test)), test_acc,
measures = list(
point_accuracy_measures,
interval_accuracy_measures,
distribution_accuracy_measures
)
)
model_sarima_accuracy
set.seed(123)
model_sarima_covariates <- train |>
as.data.frame() %>%
mutate(date = row.names(.) |>
zoo::as.yearmon() |>
yearmonth()) |>
as_tsibble() |>
model(ARIMA(
human_incidence ~ animal_incidence,
ic = "aic",
stepwise = T
)) |>
report()
fitted_covariate <- augment(model_sarima_covariates) |>
as.data.frame() %>%
select(date, fitted =.fitted, residuals = .resid) |>
mutate(date = ym(date)
)
test_tsibble <- test |>
as.data.frame() %>%
mutate(date = rownames(.) |> ymd() |> yearmonth()) |>
as_tsibble() |>
select(-human_incidence)
CI_covariate <- model_sarima_covariates |>
forecast(new_data = test_tsibble) |>
hilo()
CI_covariate80 <- CI_covariate$`80%` |>
lapply(FUN = first) |>
unlist() |>
matrix(ncol = 3, byrow = T) |>
as.data.frame() |>
select(-V3) |>
setNames(c("Lo80", "Hi80"))
CI_covariate95 <- CI_covariate$`95%` |>
lapply(FUN = first) |> unlist() |>
matrix(ncol = 3, byrow = T) |>
as.data.frame() |>
select(-V3) |>
setNames(c("Lo95", "Hi95"))
forecast_data_covariate_sarima <-
data.frame(
date = row.names(as.data.frame(test)) |>
ymd(),
PointForecast = CI_covariate$.mean,
CI_covariate80,
CI_covariate95
)
model_sarima_covariates_coefficients <-
tidy(model_sarima_covariates) |>
select(-.model) %>%
as_tibble() %>%
group_by(term)
# Accuracy
test_acc2 <- test |>
as.data.frame() %>%
mutate(date = rownames(.) |> ymd() |> yearmonth()) |>
as_tsibble() |>
select(-animal_incidence)
model_sarima_covariate_accuracy <-
accuracy(
model_sarima_covariates |>
forecast(new_data = test_tsibble) ,
test_acc,
measures = list(
point_accuracy_measures,
interval_accuracy_measures,
distribution_accuracy_measures
)
)
model_sarima_covariate_accuracy
model_sarima_accuracy2 <- model_sarima_accuracy |>
mutate(model = "Model without Covariate") |>
select(-.model, -.type) |>
select(model, RMSE, MAE, MAPE)
model_sarima_covariate_accuracy2 <- model_sarima_covariate_accuracy |>
mutate(model = "Model with Covariate") |>
select(-.model, -.type) |>
select(model, RMSE, MAE, MAPE)
metrics_df <- rbind(model_sarima_accuracy2, model_sarima_covariate_accuracy2)
write.csv(metrics_df, "metrics_df.csv", row.names = F)
kableExtra::kable(metrics_df)
write.csv(metrics_df, "metrics_df_80_20.csv", row.names = F)
# Splitting ------------------------------------------------------------------------------
# train <- window(ts_diff, start = as.Date("2014-04-01"), end = "2021-12-01")
# test <- window(df_xts, start = as.Date("2022-01-01"), end = as.Date("2022-12-01"))
# We will take 70% for training, 30% for validation.
nrow(df_xts) # our data has 105 rows, thus 70% of this is 73 rows for training and 32 for testing.,
# 0% is upto 2021-03-01 and then the rest for testing
nrow_70 <- floor(.7 * nrow(df_xts))
train <- df_xts[1:nrow_70,]
test <- df_xts[(nrow_70 + 1):nrow(df_xts),]
# ACF and PACF plots ---------------------------------------------------------------------
acf(train$human_incidence)
#> shows both trend and seasonality.
#> The slow decrease in the ACF as the lags increase is due to the trend, while the “scalloped” shape
#> is due to the seasonality. Time series that show no autocorrelation are called white noise.
pacf(train$human_incidence)
set.seed(123)
model_sarima <- train |>
as.data.frame() %>%
mutate(date = row.names(.) |>
zoo::as.yearmon() |>
yearmonth()) |>
as_tsibble() |>
model(
ARIMA(human_incidence,
ic = "aic",
stepwise = T
)
) |>
report()
original_data <- df_xts |>
as.data.frame() %>%
mutate(date = row.names(.) |> ymd())
fitted <- augment(model_sarima) |>
as.data.frame() %>%
select(date, fitted =.fitted, residuals = .resid) |>
mutate(date = ym(date)
)
CI <-  hilo(forecast::forecast(model_sarima, h = nrow(test))) |>
as.data.frame()
CI80 <- CI$`80%` |>
lapply(FUN = first) |> unlist() |>
matrix(ncol = 3, byrow = T) |>
as.data.frame() |>
select(-V3) |>
setNames(c("Lo80", "Hi80"))
CI95 <- CI$`95%` |>
lapply(FUN = first) |> unlist() |>
matrix(ncol = 3, byrow = T) |>
as.data.frame() |>
select(-V3) |>
setNames(c("Lo95", "Hi95"))
forecast_data_human_sarima <-
data.frame(
date = row.names(as.data.frame(test)) |>
ymd(),
PointForecast = CI$.mean,
CI80,
CI95
)
forecast_plot_human_sarima <- ggplot(original_data) +
geom_ribbon(data = forecast_data_human_sarima, aes(date, ymin = Lo95, ymax = Hi95, fill = "95% CI"), alpha = 0.1) +
geom_xspline(data = fitted, aes(date, y = fitted, color = "fitted")) +
geom_ribbon(data = forecast_data_human_sarima, aes(date, ymin = Lo80, ymax = Hi80, fill = "80% CI"), alpha = .4) +
geom_xspline(data = forecast_data_human_sarima, aes(date, PointForecast, colour = "Predicted human incidence")) +
geom_xspline(aes(date, human_incidence, color = "Actual human incidence")) +
theme_light() +
theme(axis.text = element_text(color = "black"),
axis.title = element_text(color = "black"),
axis.ticks = element_line(color = "black"),
legend.position = "bottom",
plot.title = element_text(color = "black", hjust = .5)
) +
xlab("Year") +
ylab("Human Incidence") +
scale_color_manual(
values = c(
"Predicted human incidence" = "red",
"Actual human incidence" = "black",
'fitted' = 'blue'
)
) +
scale_fill_manual(
values = c(
"95% CI" = "blue",
"80% CI" = "blue"
),
guide = guide_legend(
override.aes = list(alpha = c(0.25, 1))
)
) +
labs(col = NULL, fill = NULL)
#plotly::ggplotly( forecast_plot_human_sarima)
forecast_plot_human_sarima
# Accuracy
test_acc <- test |>
as.data.frame() %>%
mutate(date = rownames(.) |> ymd() |> yearmonth()) |>
as_tsibble() |>
select(-animal_incidence)
model_sarima_accuracy <- accuracy(forecast::forecast(model_sarima, h = nrow(test)), test_acc,
measures = list(
point_accuracy_measures,
interval_accuracy_measures,
distribution_accuracy_measures
)
)
model_sarima_accuracy
set.seed(123)
model_sarima_covariates <- train |>
as.data.frame() %>%
mutate(date = row.names(.) |>
zoo::as.yearmon() |>
yearmonth()) |>
as_tsibble() |>
model(ARIMA(
human_incidence ~ animal_incidence,
ic = "aic",
stepwise = T
)) |>
report()
fitted_covariate <- augment(model_sarima_covariates) |>
as.data.frame() %>%
select(date, fitted =.fitted, residuals = .resid) |>
mutate(date = ym(date)
)
test_tsibble <- test |>
as.data.frame() %>%
mutate(date = rownames(.) |> ymd() |> yearmonth()) |>
as_tsibble() |>
select(-human_incidence)
CI_covariate <- model_sarima_covariates |>
forecast(new_data = test_tsibble) |>
hilo()
CI_covariate80 <- CI_covariate$`80%` |>
lapply(FUN = first) |>
unlist() |>
matrix(ncol = 3, byrow = T) |>
as.data.frame() |>
select(-V3) |>
setNames(c("Lo80", "Hi80"))
CI_covariate95 <- CI_covariate$`95%` |>
lapply(FUN = first) |> unlist() |>
matrix(ncol = 3, byrow = T) |>
as.data.frame() |>
select(-V3) |>
setNames(c("Lo95", "Hi95"))
forecast_data_covariate_sarima <-
data.frame(
date = row.names(as.data.frame(test)) |>
ymd(),
PointForecast = CI_covariate$.mean,
CI_covariate80,
CI_covariate95
)
forecast_plot_covariate_sarima <- ggplot(original_data) +
geom_ribbon(data = forecast_data_covariate_sarima, aes(date, ymin = Lo95, ymax = Hi95, fill = "95% CI"), alpha = 0.1) +
geom_ribbon(data = forecast_data_covariate_sarima, aes(date, ymin = Lo80, ymax = Hi80, fill = "80% CI"), alpha = .4) +
geom_xspline(data = fitted_covariate, aes(date, y = fitted, color = "Fitted")) +
geom_xspline(data = forecast_data_covariate_sarima, aes(date, PointForecast, colour = "Predicted human incidence")) +
geom_xspline(aes(date, human_incidence, color = "Actual human incidence")) +
theme_light() +
theme(axis.text = element_text(color = "black"),
axis.title = element_text(color = "black"),
axis.ticks = element_line(color = "black"),
legend.position = "bottom",
plot.title = element_text(color = "black", hjust = .5)
) +
xlab("Year") +
ylab("Human Incidence") +
scale_color_manual(
values = c(
"Predicted human incidence" = "red",
"Actual human incidence" = "black",
'Fitted' = 'blue'
)
) +
scale_fill_manual(
values = c(
"95% CI" = "blue",
"80% CI" = "blue"
),
guide = guide_legend(
override.aes = list(alpha = c(0.25, 1))
)
) +
labs(col = NULL, fill = NULL)
forecast_plot_covariate_sarima
model_sarima_covariates_coefficients <-
tidy(model_sarima_covariates) |>
select(-.model) %>%
as_tibble() %>%
group_by(term)
# Accuracy
test_acc2 <- test |>
as.data.frame() %>%
mutate(date = rownames(.) |> ymd() |> yearmonth()) |>
as_tsibble() |>
select(-animal_incidence)
model_sarima_covariate_accuracy <-
accuracy(
model_sarima_covariates |>
forecast(new_data = test_tsibble) ,
test_acc,
measures = list(
point_accuracy_measures,
interval_accuracy_measures,
distribution_accuracy_measures
)
)
model_sarima_covariate_accuracy
model_sarima_accuracy2 <- model_sarima_accuracy |>
mutate(model = "Model without Covariate") |>
select(-.model, -.type) |>
select(model, RMSE, MAE, MAPE)
model_sarima_covariate_accuracy2 <- model_sarima_covariate_accuracy |>
mutate(model = "Model with Covariate") |>
select(-.model, -.type) |>
select(model, RMSE, MAE, MAPE)
metrics_df <- rbind(model_sarima_accuracy2, model_sarima_covariate_accuracy2)
write.csv(metrics_df, "metrics_df.csv", row.names = F)
kableExtra::kable(metrics_df)
write.csv(metrics_df, "metrics_df_70_30.csv", row.names = F)
q()
